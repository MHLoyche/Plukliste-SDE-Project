@page
@model Frontend.Pages.StorageModel
@{
}

@{
    ViewData["Title"] = "Storage";
}

<h1>Storage System</h1>


<table id="itemsTable" border="1" cellpadding="5">
    <thead>
        <tr>
            <th>ID</th>
            <th>Product Name</th>
            <th>Amount</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<script>
    // Run after DOM is ready
    document.addEventListener("DOMContentLoaded", () => {
      loadItems();
    });

    // Fetches the items from the API and populates the table.
    async function loadItems() {
      const tbody = document.querySelector("#itemsTable tbody");
      tbody.innerHTML = ""; // optional: clear existing rows

      try {
        const res = await fetch("https://localhost:7148/storage/items");
        if (!res.ok) {
          throw new Error(`HTTP ${res.status} ${res.statusText}`);
        }

        const data = await res.json();
        console.log("API response:", data); // <-- safe: inside the same scope

        // Inserts the data from the JSON file.
        for (const [id, item] of Object.entries(data)) {
          const tr = document.createElement("tr");

          const tdId = document.createElement("td");
          tdId.textContent = id;

          const tdName = document.createElement("td");
          tdName.textContent = item.name;

          const tdAmount = document.createElement("td");
          tdAmount.textContent = item.amount;

          tr.append(tdId, tdName, tdAmount);
          tbody.appendChild(tr);
        }
      } catch (err) {
        console.error("Error fetching storage items:", err);
      }
    }
</script>
